#version 430 core

precision highp float;

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout(rgba32f) uniform image2D imgOutput;

uniform ivec2 imageSize;
uniform ivec2 topleft;
uniform float zoom;


void main() {
    ivec2 pixelPos = ivec2(gl_GlobalInvocationID.xy) - imageSize / 2 - topleft;

    if (gl_GlobalInvocationID.x >= imageSize.x || gl_GlobalInvocationID.y >= imageSize.y) {
        return;
    }

    const int MAX_ITERATIONS = 1000;

    vec2 initialPos = vec2(pixelPos) / float(max(imageSize.x, imageSize.y)) * float(zoom);

    vec2 lastPos = vec2(0);
    vec2 currentPos = vec2(0);
    float w = 0;
    vec2 loop_detection = lastPos;
    int iterations = 0;
    for (iterations = 0; iterations < MAX_ITERATIONS && abs(currentPos.x) < 2 && abs(currentPos.y) < 2; iterations++) {
        lastPos =
            vec2(currentPos.x - currentPos.y + initialPos.x, w - currentPos.x - currentPos.y + initialPos.y);
        currentPos = vec2(lastPos.x * lastPos.x, lastPos.y * lastPos.y);
        w = (lastPos.x + lastPos.y) * (lastPos.x + lastPos.y);

        if (loop_detection == lastPos) {
            iterations = MAX_ITERATIONS;
            break;
        }

        if (iterations % 20 == 0) {
            loop_detection = lastPos;
        }
    }
    vec4 value = vec4(vec3(float(iterations) / float(MAX_ITERATIONS)), 1);

    imageStore(imgOutput, ivec2(gl_GlobalInvocationID.xy), value);
}
