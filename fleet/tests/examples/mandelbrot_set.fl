let putchar = (c: i32) -> i32 @extern "putchar";
let put_number = (n: i32) -> () {
    if n < 0 {
        putchar(45); // '-'
        n = -n;
    }
    if n == 0 {
        putchar(48); // '0'
    }
    else {
        let buf: i32[10] = @zero();
        let i: i32 = 0;
        while n > 0 {
            buf[i] = 48 + n % 10;
            n = n / 10;
            i = i + 1;
        }
        while i > 0 {
            i = i - 1;
            putchar(buf[i]);
        }
    }
}
let scale_x = (x: i32, width: i32, height: i32) -> f32 {
    return (x as f32 / width as f32 - 0.5) * 2.0 * width as f32 / height as f32;
}
let scale_y = (y: i32, width: i32, height: i32) -> f32 {
    return (y as f32 / height as f32 - 0.5) * 2.0;
}
let min = (a: f32, b: f32) -> f32 {
    if a > b {
        return b;
    }
    else {
        return a;
    }
}
let max = (a: f32, b: f32) -> f32 {
    if b > a {
        return b;
    }
    else {
        return a;
    }
}
let clamp = (x: f32, minv: f32, maxv: f32) -> f32 {
    return min(max(x, minv), maxv);
}
let main = () -> i32 {
    let num_iterations: i32 = 5000;
    let width = 1920;
    let height = 1080;
    let image: f32[1920][1080] = @zero();
    on self.gpus[0][px = width][py = height] (image[py][px]) {
        let x0 = scale_x(px, width, height);
        let y0 = scale_y(py, width, height);
        let x = 0.0;
        let y = 0.0;
        let i: i32 = 0;
        for (i = 0; i < num_iterations && x * x + y * y <= 4.0; i = i + 1) {
            let xtmp = x * x - y * y + x0;
            y = 2.0 * x * y + y0;
            x = xtmp;
        }
        image[py][px] = i as f32 / num_iterations as f32;
    }
    putchar(80);
    put_number(3);
    putchar(10);
    put_number(width);
    putchar(32);
    put_number(height);
    putchar(10);
    put_number(255);
    putchar(10);
    for (let y = 0; y < height; y = y + 1) {
        for (let x = 0; x < width; x = x + 1) {
            // make image binary to avoid float-rounding issues in test. Can also be a simple grayscale otherwise:
            // let brightness = (image[y][x] * 255) as i32;
            let brightness = 0;
            if image[y][x] != 0 {
                brightness = 255;
            }
            put_number(brightness);
            putchar(32);
            put_number(brightness);
            putchar(32);
            put_number(brightness);
            putchar(32);
        }
        putchar(10);
    }
    return 0;
}
